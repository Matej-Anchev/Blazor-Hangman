@using BlazorTutorial.Resources.Categories

<svg width="200" height="250" style="margin-bottom: 20px;">
    <!-- Gallows -->
    <line x1="50" y1="230" x2="150" y2="230" stroke="black" stroke-width="4" /> <!-- Base -->
    <line x1="100" y1="230" x2="100" y2="50" stroke="black" stroke-width="4" /> <!-- Pole -->
    <line x1="100" y1="50" x2="160" y2="50" stroke="black" stroke-width="4" /> <!-- Top -->
    <line x1="160" y1="50" x2="160" y2="70" stroke="black" stroke-width="4" /> <!-- Rope -->
    <!-- Head -->
    @if (WrongGuesses > 0)
    {
        <circle cx="160" cy="85" r="15" stroke="black" stroke-width="3" fill="none" />
    }

    <!-- Body -->
    @if (WrongGuesses > 1)
    {
        <line x1="160" y1="100" x2="160" y2="150" stroke="black" stroke-width="3" />
    }

    <!-- Left Arm -->
    @if (WrongGuesses > 2)
    {
        <line x1="160" y1="110" x2="140" y2="130" stroke="black" stroke-width="3" />
    }

    <!-- Right Arm -->
    @if (WrongGuesses > 3)
    {
        <line x1="160" y1="110" x2="180" y2="130" stroke="black" stroke-width="3" />
    }

    <!-- Left Leg -->
    @if (WrongGuesses > 4)
    {
        <line x1="160" y1="150" x2="140" y2="180" stroke="black" stroke-width="3" />
    }

    <!-- Right Leg -->
    @if (WrongGuesses > 5)
    {
        <line x1="160" y1="150" x2="180" y2="180" stroke="black" stroke-width="3" />
    }
</svg>

<p>Guess the word:</p>

<p>
    @foreach (var c in DisplayWord)
    {
        <span style="font-size: 2em; margin-right: 10px;">@c</span>
    }
</p>

<p>Wrong guesses: (@WrongGuesses / @MaxWrongGuesses)</p>

<button class="backButton" @onclick='() => Navigation.NavigateTo("/gameoptions")'>
    Back
</button>

@if (IsGameOver)
{
    @if (IsWin)
    {
        <p style="color:green; font-weight:bold;">You won! 🎉</p>
    }
    else
    {
        <p style="color:red; font-weight:bold;">You lost! The word was: <b>@Word</b></p>
    }
    <button @onclick="StartNewGame">Play Again</button>
}
else
{
    <p>Pick a letter:</p>

    <button @onclick="UseHelp"
            disabled="@(!CanUseHelp)"
            style="background-color:@HelpButtonColor; font-weight:bold; margin-bottom: 10px;">
        Help
        (@HelpUsesRemaining left)
    </button>

    <div>
        @foreach (var letter in Alphabet)
        {
            <button class="letterButton" @onclick="() => GuessLetter(letter)" disabled="@UsedLetters.Contains(letter)">
                @letter
            </button>
        }
    </div>
}

@code {
    [Inject]
    protected NavigationManager Navigation { get; set; }

    protected string Word { get; set; } = string.Empty;
    protected HashSet<char> UsedLetters { get; set; } = new();
    protected const int MaxWrongGuesses = 6;
    protected List<char> Alphabet { get; set; } = Enumerable.Range('A', 26).Select(c => (char)c).ToList();
    protected int HelpUsesRemaining { get; set; } = 2;

    protected virtual bool IsGameOver => IsWin || WrongGuesses >= MaxWrongGuesses;
    protected bool IsWin => !string.IsNullOrEmpty(Word) && Word.All(c => UsedLetters.Contains(char.ToUpper(c)));
    protected bool CanUseHelp => HelpUsesRemaining > 0 && !IsGameOver;
    protected string HelpButtonColor => CanUseHelp ? "yellow" : "lightgray";

    protected IEnumerable<char> DisplayWord =>
        Word.Select(c => UsedLetters.Contains(char.ToUpper(c)) ? c : '_');

    protected int WrongGuesses => UsedLetters.Count(c => !Word.ToUpper().Contains(c));

    protected virtual void StartNewGame()
    {
        // To be implemented by derived classes
    }

    protected void GuessLetter(char letter)
    {
        letter = char.ToUpper(letter);

        if (UsedLetters.Contains(letter) || IsGameOver)
            return;

        UsedLetters.Add(letter);
        OnGuessMade();
    }

    protected void UseHelp()
    {
        if (!CanUseHelp)
            return;

        var unusedLetters = Word.ToUpper()
            .Where(c => !UsedLetters.Contains(c))
            .Distinct()
            .ToList();

        if (unusedLetters.Count == 0)
            return;

        var random = new Random();
        var hintLetter = unusedLetters[random.Next(unusedLetters.Count)];
        UsedLetters.Add(hintLetter);
        HelpUsesRemaining--;
        OnHelpUsed();
    }

    protected virtual void OnGuessMade() { }
    protected virtual void OnHelpUsed() { }
}